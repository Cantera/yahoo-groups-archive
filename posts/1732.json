{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":259422991,"authorName":"nedatlund","from":"&quot;nedatlund&quot; &lt;edward.blurock@...&gt;","profile":"nedatlund","replyTo":"LIST","senderId":"5q8mB7p7QPgymEpTzxrdu9WF6X0cot33_45UM9a6GUtwLH33o_6hb4QB01pghUZFisod49Scv30zK_Lk4Rxsc_bhON2gkeiF4RE1BruMjLg_ew","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Ethanol: Adiabatic Constant Pressure Ignition Delay Times with class &#39;Reaction&#39;","postDate":"1190827455","msgId":1732,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGZkZTRqdityc2xuQGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":1733,"prevInTime":1731,"nextInTime":1733,"topicId":1732,"numMessagesInTopic":2,"msgSnippet":"I am trying to use the Reaction.h class directly to model adiabatic constant pressure calculations with the Marinov scheme -- with the appropriate changes to","rawEmail":"Return-Path: &lt;edward.blurock@...&gt;\r\nX-Sender: edward.blurock@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nReceived: (qmail 41648 invoked from network); 26 Sep 2007 17:24:20 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m57.grp.scd.yahoo.com with QMQP; 26 Sep 2007 17:24:20 -0000\r\nReceived: from unknown (HELO n32c.bullet.scd.yahoo.com) (66.94.237.10)\n  by mta9.grp.scd.yahoo.com with SMTP; 26 Sep 2007 17:24:20 -0000\r\nReceived: from [66.218.69.3] by n32.bullet.scd.yahoo.com with NNFMP; 26 Sep 2007 17:24:16 -0000\r\nReceived: from [66.218.66.73] by t3.bullet.scd.yahoo.com with NNFMP; 26 Sep 2007 17:24:16 -0000\r\nDate: Wed, 26 Sep 2007 17:24:15 -0000\r\nTo: cantera@yahoogroups.com\r\nMessage-ID: &lt;fde4jv+rsln@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;nedatlund&quot; &lt;edward.blurock@...&gt;\r\nSubject: Ethanol: Adiabatic Constant Pressure Ignition Delay Times with class &#39;Reaction&#39;\r\nX-Yahoo-Group-Post: member; u=259422991; y=bXHN_OxlOFT9O8thlX0uc3CuRrP-ikSk828F27Zq6gblrUjN\r\nX-Yahoo-Profile: nedatlund\r\n\r\nI am trying to use the Reaction.h class directly to model adiabatic\nconstan=\r\nt pressure calculations with the Marinov scheme -- with the\nappropriate cha=\r\nnges to compile it -- for ethanol. I am using the\nkinetics_example1.cpp as =\r\na base, with the wall effects taken out (well\nthat was one of my iterations=\r\n is looking at this problem). \n\nFor the stochiometric case with 1.25% ethan=\r\nol, 3.75% O2 (N2 is the\ninert gas) the key changes I made to the example we=\r\nre:\n\n IdealGasMix* gg =3D new IdealGasMix(&quot;ethanol_mech.cti&quot;, &quot;ethanol_mech=\r\n&quot;);\n\ngas.setState_TPX(1250.0, OneAtm*3.5, &quot;c2h5oh:1.25, o2:3.75, n2:95.0&quot;);=\r\n\n\n(the Wall class was commented out)\n\nThe ignition delay time for this case=\r\n should be around .8ms (from fig\n11, in the original paper)\n\nI am probably =\r\ndoing something trivially stupid, but at the moment I do\nnot know..\nAny hel=\r\np would be appreciated.\n\nEdward Blurock\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n\nThe listing....\n\n/////////////////////////////////////////////////////////=\r\n////\n//\n//  zero-dimensional kinetics example program\n//\n//  $Author: dggoo=\r\ndwin $\n//  $Revision: 1.10 $\n//  $Date: 2006/11/27 21:43:35 $\n//\n//  copyri=\r\nght California Institute of Technology 2002\n//\n////////////////////////////=\r\n/////////////////////////////////\n\n// turn off warnings under Windows\n#ifde=\r\nf WIN32\n#pragma warning(disable:4786)\n#pragma warning(disable:4503)\n#endif\n=\r\n\n#include &lt;cantera/Cantera.h&gt;\n#include &lt;cantera/zerodim.h&gt;\n#include &lt;canter=\r\na/IdealGasMix.h&gt;\n#include &lt;time.h&gt;\n#include &quot;example_utils.h&quot;\nusing namespa=\r\nce Cantera;\nusing namespace std;\n\n// Kinetics example. This is written as a=\r\n function so that one \n// driver program can run multiple examples.\n// The =\r\naction taken depends on input parameter job:\n//     job =3D 0:   print a on=\r\ne-line description of the example.\n//     job =3D 1:   print a longer descr=\r\niption\n//     job =3D 2:   print description, then run the example.\n//\n\n// =\r\nNote: although this simulation can be done in C++, as shown here,\n// it is =\r\nmuch easier in Python or Matlab!\n\nint kinetics_example1(int job);\n\n\n// main=\r\n program\nint main(int argc, char** argv) {\n\n    cout &lt;&lt; endl\n         &lt;&lt; &quot;-=\r\n----------------------------------&quot; &lt;&lt; endl\n         &lt;&lt; &quot;       Cantera C++=\r\n examples        &quot; &lt;&lt; endl\n         &lt;&lt; &quot;-----------------------------------=\r\n&quot; &lt;&lt; endl;\n\n    int i =3D kinetics_example1(2);\n    return i;\n}\n\n\nint kinet=\r\nics_example1(int job) {\n\n    try {\n\n        cout &lt;&lt; &quot;Ignition simulation us=\r\ning class IdealGasMix &quot;\n             &lt;&lt; &quot;with file ethanol_mech.xml.&quot; \n    =\r\n         &lt;&lt; endl;\n\n        if (job &gt;=3D 1) {\n            cout &lt;&lt; &quot;Constant-=\r\npressure ignition of a &quot;\n                 &lt;&lt; &quot;C2H5OH/O2/N2&quot;\n               =\r\n &quot; mixture &#92;nbeginning at T =3D 1250 K and P =3D 3.5 atm.&quot;\n&lt;&lt; endl;\n       =\r\n }\n        if (job &lt; 2) return 0;\n\n        // header\n        writeCanteraHe=\r\nader(cout);\n\n        // create an ideal gas mixture that corresponds to GRI=\r\n-Mech\n        // 3.0\n        IdealGasMix* gg =3D new IdealGasMix(&quot;ethanol_m=\r\nech.xml&quot;,\n&quot;ethanol_mech&quot;);\n        IdealGasMix& gas =3D *gg;\n\n        // se=\r\nt the state\n        gas.setState_TPX(1250.0, OneAtm*3.5, &quot;c2h5oh:1.25, o2:3=\r\n.75,\nn2:95.0&quot;);\n        int kk =3D gas.nSpecies();\n\n        // create a rea=\r\nctor\n        Reactor r;\n\n        // create a reservoir to represent the env=\r\nironment\n        Reservoir env;\n\n        // specify the thermodynamic prope=\r\nrty and kinetics managers\n        r.setThermoMgr(gas);\n        r.setKinetic=\r\nsMgr(gas);\n        env.setThermoMgr(gas);\n\n        // create a flexible, in=\r\nsulating wall between the reactor and the\n        // environment\n        //=\r\nWall w;\n        //w.install(r,env);\n\n        // set the &quot;Vdot coefficient&quot; =\r\nto a large value, in order to\n        // approach the constant-pressure lim=\r\nit; see the documentation \n        // for class Reactor\n        //w.setExpa=\r\nnsionRateCoeff(1.e9);\n        //w.setArea(1.0);\n\n        // create a contai=\r\nner object to run the simulation\n        // and add the reactor to it\n     =\r\n   ReactorNet sim;\n        sim.addReactor(&r);\n\n        double tm;\n        =\r\ndouble dt =3D 1.e-5;    // interval at which output is written\n        int =\r\nnsteps =3D 100;     // number of intervals\n\n        // create a 2D array to=\r\n hold the output variables,\n        // and store the values for the initial=\r\n state\n        Array2D soln(kk+4, 1);\n        saveSoln(0, 0.0, gas, soln);\n=\r\n\n        // main loop\n        clock_t t0 =3D clock();\n        for (int i =\r\n=3D 1; i &lt;=3D nsteps; i++) {\n            tm =3D i*dt;\n            sim.advan=\r\nce(tm);\n            saveSoln(tm, gas, soln);\n\t}\n\n        clock_t t1 =3D clo=\r\nck();\n\n\n        // make a Tecplot data file and an Excel spreadsheet\n      =\r\n  string plotTitle =3D &quot;kinetics example 1: constant-pressure\nignition&quot;;\n  =\r\n      plotSoln(&quot;kin1.dat&quot;, &quot;TEC&quot;, plotTitle, gas, soln);\n        plotSoln(&quot;=\r\nkin1.csv&quot;, &quot;XL&quot;, plotTitle, gas, soln);\n\n\n        // print final temperatur=\r\ne and timing data\n        doublereal tmm =3D 1.0*(t1 - t0)/CLOCKS_PER_SEC;\n=\r\n        cout &lt;&lt; &quot; Tfinal =3D &quot; &lt;&lt; r.temperature() &lt;&lt; endl;\n        cout &lt;&lt; =\r\n&quot; time =3D &quot; &lt;&lt; tmm &lt;&lt; endl;\n        cout &lt;&lt; &quot; number of residual function =\r\nevaluations =3D &quot; \n             &lt;&lt; sim.integrator().nEvals() &lt;&lt; endl;\n     =\r\n   cout &lt;&lt; &quot; time per evaluation =3D &quot; &lt;&lt;\ntmm/sim.integrator().nEvals() \n  =\r\n           &lt;&lt; endl &lt;&lt; endl;\n        cout &lt;&lt; &quot;Output files:&quot; &lt;&lt; endl\n       =\r\n      &lt;&lt; &quot;  kin1.csv    (Excel CSV file)&quot; &lt;&lt; endl\n             &lt;&lt; &quot;  kin1.d=\r\nat    (Tecplot data file)&quot; &lt;&lt; endl;\n\n#define DEBUG_HKM\n#ifdef DEBUG_HKM\n\tde=\r\nlete gg;\n#endif\n        return 0;\n    }\n\n    // handle exceptions thrown by=\r\n Cantera\n    catch (CanteraError) {\n        showErrors(cout);\n        cout =\r\n&lt;&lt; &quot; terminating... &quot; &lt;&lt; endl;\n        appdelete();\n        return -1;\n    =\r\n}\n}\n\n\n\n"}}