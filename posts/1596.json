{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":308553517,"authorName":"evlampiev.renuda","from":"&quot;evlampiev.renuda&quot; &lt;alexey.evlampiev@...&gt;","profile":"evlampiev.renuda","replyTo":"LIST","senderId":"V_xDoVQhuxgPsVbRJpgCKefljWFU7da4ChmHU1kQO9OZgGSqjadOoz1MK4FktF4mzPZeICMZzsUq2PPFgdx7vNohFHTwrEKc6MQW0Ia-nstx9BLpmnDi","spamInfo":{"isSpam":false,"reason":"6"},"subject":"bugs cantera 1.7.0","postDate":"1177512817","msgId":1596,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PGYwbnExaCtkbXJ2QGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":1598,"prevInTime":1595,"nextInTime":1597,"topicId":1596,"numMessagesInTopic":2,"msgSnippet":"Hello All In our project Cantera 1.7.0 is used as an external complex chemistry simulator coupled with KIVA-program. We found some bugs and issues for an","rawEmail":"Return-Path: &lt;alexey.evlampiev@...&gt;\r\nReceived: (qmail 66256 invoked from network); 26 Apr 2007 15:19:08 -0000\r\nReceived: from unknown (66.218.67.34)\n  by m45.grp.scd.yahoo.com with QMQP; 26 Apr 2007 15:19:08 -0000\r\nReceived: from unknown (HELO n11d.bullet.scd.yahoo.com) (66.218.67.60)\n  by mta8.grp.scd.yahoo.com with SMTP; 26 Apr 2007 15:19:08 -0000\r\nReceived: from [66.218.69.5] by n22.bullet.scd.yahoo.com with NNFMP; 26 Apr 2007 15:16:08 -0000\r\nReceived: from [66.218.66.77] by t5.bullet.scd.yahoo.com with NNFMP; 26 Apr 2007 15:16:08 -0000\r\nX-Sender: alexey.evlampiev@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nReceived: (qmail 85973 invoked from network); 25 Apr 2007 14:54:16 -0000\r\nReceived: from unknown (66.218.67.35)\n  by m40.grp.scd.yahoo.com with QMQP; 25 Apr 2007 14:54:16 -0000\r\nReceived: from unknown (HELO n11d.bullet.scd.yahoo.com) (66.218.67.60)\n  by mta9.grp.scd.yahoo.com with SMTP; 25 Apr 2007 14:54:16 -0000\r\nReceived: from [209.73.164.86] by n22.bullet.scd.yahoo.com with NNFMP; 25 Apr 2007 14:53:37 -0000\r\nReceived: from [66.218.66.74] by t8.bullet.scd.yahoo.com with NNFMP; 25 Apr 2007 14:53:37 -0000\r\nDate: Wed, 25 Apr 2007 14:53:37 -0000\r\nTo: cantera@yahoogroups.com\r\nMessage-ID: &lt;f0nq1h+dmrv@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Msg-Info: 1:6:0:0\r\nFrom: &quot;evlampiev.renuda&quot; &lt;alexey.evlampiev@...&gt;\r\nSubject: bugs cantera 1.7.0\r\nX-Yahoo-Group-Post: member; u=308553517; y=HtvF9OScxEbPq3ai1mfCWmbA34WYPu_02VSeB_K6u1UlGxHyCPzlfoxw1w\r\nX-Yahoo-Profile: evlampiev.renuda\r\nX-eGroups-Approved-By: dggoodwin &lt;dgoodwin@...&gt; via web; 26 Apr 2007 15:16:07 -0000\r\n\r\nHello All\n\nIn our project Cantera 1.7.0 is used as an external complex chem=\r\nistry\nsimulator coupled with KIVA-program. We found some bugs and issues fo=\r\nr\nan improvement. Please check below the description of the\nmodifications w=\r\ne made.\n\nAlexey\n\n//=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D\n\nM=\r\nodifications to the class CVodesErr\n\nFile: \nCVodesIntegrator.h\nDescription:=\r\n\nThe original version of Cantera deals with exceptions by buffering\nerror m=\r\nessages.  This causes memory overruns when Cantera is called\nrepeatedly fro=\r\nm a CFD application and error messages accumulate.  This\nproblem was witnes=\r\nsed when CVodes =96 integrator failed repeatedly,\nresulting in the CVodesEr=\r\nr-exception. To circumvent this problem, the\nCVodesErr class was modified t=\r\no report errors using the STL exception\nreporting, instead of submitting er=\r\nror messages to the dynamic storage.\nModification 1\nFile: \t\t\t\t\tCVodesIntegr=\r\nator.h\nAdditional include statement\t\t#include &lt;stdexcept&gt;\n\nModification 2\nF=\r\nile: \t\t\t\tCVodesIntegrator.h\nClass declaration:\t\tclass CVodesErr\n\n\nOriginal =\r\ncode:\n\nclass CVodesErr : public CanteraError {\n    public:\n        CVodesEr=\r\nr(string msg) : CanteraError(&quot;CVodesIntegrator&quot;, msg){}\n    };\n\n\nModified c=\r\node:\n\n\nclass CVodesErr : public std::runtime_error \n{\n\ttypedef std::runtime=\r\n_error BASE;\npublic:\n\tCVodesErr(string msg) : \n\t\tBASE( std::string(&quot;CVodesI=\r\nntegrator: &quot;) + msg){}\n};\n\nModification for the class CVodesIntegrator\nFile=\r\ns: \nCVodesIntegrator.h\nCVodesIntegrator.cpp\nDescription:\nThere is a memory =\r\nleak problem associated with the method \n\nvoid CVodesIntegrator::initialize=\r\n(double t0, FuncEval& func)\n\nRepeated calls to the CVodes-integrator perfor=\r\nm the memory allocations\n\nm_fdata =3D new FuncData(&func, func.nparams());\n=\r\n\nwithout any prior de-allocation applied to the m_fdata-pointer. It is\nnece=\r\nssary to modify the CVodesIntegrator class to ensure proper\ndestruction of =\r\npointers. The modifications have been made in files\nCVodesIntegrator.h and =\r\nCVodesIntegrator.cpp.\n\nModification 1\n\nFile: \t\t\tCVodesIntegrator.h\nClass de=\r\nclaration:\tclass CVodesIntegrator\n\nOriginal code:\n\nFuncData* m_fdata;\n\nModi=\r\nfied code:\n\nstd::auto_ptr&lt; FuncData &gt; m_fdata;\n\nModification 2\n\nFile:\t\t\tCVo=\r\ndesIntegrator.cpp\nMethod:\t\nvoid CVodesIntegrator::initialize(double t0, Fun=\r\ncEval& func) \n\nOriginal code:\n \nm_fdata =3D new FuncData(&func, func.nparam=\r\ns());\n\nModified code:\n\nm_fdata.reset( new FuncData(&func, func.nparams()) )=\r\n;\n        \nModification 3\n\nFile:\t\t\tCVodesIntegrator.cpp\nMethod:\t\nvoid CVode=\r\nsIntegrator::initialize(double t0, FuncEval& func) \n\nOriginal code:\n\nflag =\r\n=3D CVodeSetFdata(m_cvode_mem, (void*)m_fdata);\n\nModified code:\n\nflag =3D C=\r\nVodeSetFdata(m_cvode_mem, (void*)( m_fdata.get() ));\n\nModification for the =\r\nclass GasKinetics\nFile: \nGasKinetics.cpp\nDescription:\n\nChecks must be added=\r\n to prevent memory access violations.\nModification 1\nFile:\t\tGasKinetics.cpp=\r\n\nMethod:\tvoid GasKinetics::_update_rates_T()\n\nOriginal code:\n\nm_rates.updat=\r\ne(T, logT, &m_kdata-&gt;m_rfn[0]);\n\nModified code:\n\nif( false =3D=3D m_kdata-&gt;=\r\nm_rfn.empty() )m_rates.update(T, logT,\n&m_kdata-&gt;m_rfn[0]);\n\nModification 2=\r\n\nFile: GasKinetics.cpp\nFunction: void GasKinetics::_update_rates_T()\n\nOrigi=\r\nnal code:\n\nm_falloff_low_rates.update(T, logT, &m_kdata-&gt;m_rfn_low[0]); \n\nM=\r\nodified code:\n\nif( false =3D=3D m_kdata-&gt;m_rfn_low.empty() )\nm_falloff_low_=\r\nrates.update(T, logT, &m_kdata-&gt;m_rfn_low[0]); \n\nModification 3\nFile: GasKi=\r\nnetics.cpp\nFunction: void GasKinetics::_update_rates_T()\n\nOriginal code:\n\nm=\r\n_falloff_high_rates.update(T, logT, &m_kdata-&gt;m_rfn_high[0]);\n\nModified cod=\r\ne:\n\nif( false =3D=3D m_kdata-&gt;m_rfn_high.empty()\n)m_falloff_high_rates.upda=\r\nte(T, logT, &m_kdata-&gt;m_rfn_high[0]);\n\nModification 4\nFile: GasKinetics.cpp=\r\n\nFunction: void GasKinetics::_update_rates_T()\n\n\nOriginal code:\n\nm_falloffn=\r\n.updateTemp(T, &m_kdata-&gt;falloff_work[0]);\n\nModified code:\n\nif( false =3D=\r\n=3D m_kdata-&gt;falloff_work.empty() )m_falloffn.updateTemp(T,\n&m_kdata-&gt;fallo=\r\nff_work[0]);\n\n\nModification 5\nFile: GasKinetics.cpp\nFunction: void GasKinet=\r\nics::_update_rates_C()\n\n\nOriginal code:\n\n\nthermo().getActivityConcentration=\r\ns(&m_conc[0]);\n\nModified code:\n\nif( false =3D=3D m_conc.empty()\n)thermo().g=\r\netActivityConcentrations(&m_conc[0]); \n\n\nModification 6\nFile: GasKinetics.c=\r\npp\nFunction: void GasKinetics::_update_rates_C()\n\nOriginal code:\n\nm_3b_conc=\r\nm.update(m_conc, ctot, &m_kdata-&gt;concm_3b_values[0]);\n\nModified code:\n\nif( =\r\nfalse =3D=3D m_kdata-&gt;concm_3b_values.empty() )\nm_3b_concm.update(m_conc, c=\r\ntot, &m_kdata-&gt;concm_3b_values[0]);\n\nModification 7\nFile: GasKinetics.cpp\nF=\r\nunction: void GasKinetics::_update_rates_C()\n\n\nOriginal code:\n\nm_falloff_co=\r\nncm.update(m_conc, ctot, \n            &m_kdata-&gt;concm_falloff_values[0]);\n\n=\r\nModified code:\n\n\nif(false =3D=3D m_kdata-&gt;concm_falloff_values.empty()\n)m_f=\r\nalloff_concm.update(m_conc, ctot, \n            &m_kdata-&gt;concm_falloff_valu=\r\nes[0]);\n\n\n\nModification 8\nFile: GasKinetics.cpp\nFunction: void GasKinetics:=\r\n:updateKc()\n\nOriginal code:\n\nthermo().getStandardChemPotentials(&m_grt[0]);=\r\n\n\nModified code:\n\nif( false =3D=3D m_grt.empty() )\nthermo().getStandardChem=\r\nPotentials(&m_grt[0]);\n\n\nModification 9\nFile: GasKinetics.cpp\nFunction: voi=\r\nd GasKinetics::updateKc()\n\nOriginal code:\n\nm_rxnstoich-&gt;getRevReactionDelta=\r\n(m_ii, &m_grt[0], &m_rkc[0]);\n\nModified code:\n\nif( false =3D=3D m_grt.empty=\r\n() && false =3D=3D m_rkc.empty()\n)m_rxnstoich-&gt;getRevReactionDelta(m_ii, &m=\r\n_grt[0], &m_rkc[0]);\n\n\n\n\nModification 10\nFile: GasKinetics.cpp\nFunction:  v=\r\noid GasKinetics::getEquilibriumConstants(doublereal* kc)\n\nOriginal code:\n\nt=\r\nhermo().getStandardChemPotentials(&m_grt[0]);\n\nModified code:\n\nif( false =\r\n=3D=3D m_grt.empty() )\nthermo().getStandardChemPotentials(&m_grt[0]);\n\n\n\nMo=\r\ndification 11\nFile: GasKinetics.cpp\nFunction:  void GasKinetics::getEquilib=\r\nriumConstants(doublereal* kc)\n\nOriginal code:\n\nm_rxnstoich-&gt;getReactionDelt=\r\na(m_ii, &m_grt[0], &rkc[0]);\n\nModified code:\n\nif( false =3D=3D m_grt.empty(=\r\n) && false =3D=3D rkc.empty() )\nm_rxnstoich-&gt;getReactionDelta(m_ii, &m_grt[=\r\n0], &rkc[0]);\n\n\n\nModification 12\nFile: GasKinetics.cpp\nFunction:  void GasK=\r\ninetics::getDeltaGibbs(doublereal* deltaG)\n\n\nOriginal code:\n\nthermo().getCh=\r\nemPotentials(&m_grt[0]);\n\nModified code:\n\nif( false =3D=3D m_grt.empty() ) =\r\nthermo().getChemPotentials(&m_grt[0]);\n\n\n\nModification 13\nFile: GasKinetics=\r\n.cpp\nFunction:  void GasKinetics::getDeltaGibbs(doublereal* deltaG)\n\nOrigin=\r\nal code:\n\nm_rxnstoich-&gt;getReactionDelta(m_ii, &m_grt[0], deltaG);\n\nModified=\r\n code:\n\nif( false =3D=3D m_grt.empty() ) m_rxnstoich-&gt;getReactionDelta(m_ii=\r\n,\n&m_grt[0], deltaG);\n\n\nModification 14\nFile: GasKinetics.cpp\nFunction:  vo=\r\nid GasKinetics::processFalloffReactions()\n\nOriginal code:\n\nm_falloffn.pr_to=\r\n_falloff( &pr[0], &m_kdata-&gt;falloff_work[0] );\n\nModified code:\n\nif( false =\r\n=3D=3D m_kdata-&gt;falloff_work.empty() )m_falloffn.pr_to_falloff(\n&pr[0], &m_=\r\nkdata-&gt;falloff_work[0] );\n\n\n\n\n\n\n\n\n"}}