{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":151946130,"authorName":"brooksmoses1","from":"&quot;brooksmoses1&quot; &lt;brooksmail@...&gt;","profile":"brooksmoses1","replyTo":"LIST","senderId":"vhw5-_XUuaUbiHhIAe54OMK9Q5Aelpnusrdt1qP8b-MjtTxrUmMynNnQlUyqvJk8GuDOeqXXZOn4pAFE_8MGR1eh3UlBTKc0e4tmph6XVMcwYGxdAg","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Re: Copying Cantera mixtures in matlab?","postDate":"1061327185","msgId":180,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGJodTNnaCtnczZjQGVHcm91cHMuY29tPg==","inReplyToHeader":"PDU5MkExNDdDLUQxRjYtMTFENy1BNkVDLTAwMDM5M0QyRDFBRUBjYWx0ZWNoLmVkdT4="},"prevInTopic":179,"nextInTopic":181,"prevInTime":179,"nextInTime":181,"topicId":178,"numMessagesInTopic":5,"msgSnippet":"Dave - Thanks for the confirmation.  And, yes, in the simple example I gave, constructing the two gasses independently is certainly just as simple as copying","rawEmail":"Return-Path: &lt;brooksmail@...&gt;\r\nX-Sender: brooksmail@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nReceived: (qmail 66400 invoked from network); 19 Aug 2003 21:07:00 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m18.grp.scd.yahoo.com with QMQP; 19 Aug 2003 21:07:00 -0000\r\nReceived: from unknown (HELO n12.grp.scd.yahoo.com) (66.218.66.67)\n  by mta2.grp.scd.yahoo.com with SMTP; 19 Aug 2003 21:07:00 -0000\r\nReceived: from [66.218.67.185] by n12.grp.scd.yahoo.com with NNFMP; 19 Aug 2003 21:06:26 -0000\r\nDate: Tue, 19 Aug 2003 21:06:25 -0000\r\nTo: cantera@yahoogroups.com\r\nSubject: Re: Copying Cantera mixtures in matlab?\r\nMessage-ID: &lt;bhu3gh+gs6c@...&gt;\r\nIn-Reply-To: &lt;592A147C-D1F6-11D7-A6EC-000393D2D1AE@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=ISO-8859-1\r\nContent-Length: 3046\r\nX-Mailer: Yahoo Groups Message Poster\r\nFrom: &quot;brooksmoses1&quot; &lt;brooksmail@...&gt;\r\nX-Yahoo-Group-Post: member; u=151946130\r\nX-Yahoo-Profile: brooksmoses1\r\n\r\nDave -\n\nThanks for the confirmation.  And, yes, in the simple example I\ngave, constructing the two gasses independently is certainly just\nas simple as copying them.  In our real code, however, it&#39;s a bit \nmore complicated, and parallel construction isn&#39;t nearly as \npossible.\n\nTo a simplified approximation, we have a situation like this: a \nfunction A, which takes a gas composition G as an argument.  It \ncalls function B twice, giving it G and two different parameter \nsets.  B returns a new gas composition -- specifically, G after \nsome reaction processes -- each time, and A compares the two \nresulting gas compositions and returns some results from the \ncomparison.\n\nThe two core problems, there, are (1) that function B is given G \nas an argument, and returns a modified version of G as a result, \nbut the code that calls it assumes that it leaves G itself \nunmodified in the process, and (2) that parallel construction is \nnot properly possible, as A and B do not have sufficient \ninformation to create a duplicate of G; they do not know what \nparameter file to use.\n\nOur current workaround is to hardcode the reaction file into our \nprogram in several places; an alternate one would be to have A \nstore the state of G in temp variables, call B with the first \nparameter set, extract the relevant state information from the \nmodified G, reset G to the initial state using the stored values, \nand repeat with the second parameter set.\n\nIn both workarounds, we are effectively re-implementing a \n(defective) deep copy in the Matlab code; the former option is \ndefective by assuming a gas type and requires alterating the \ncode if it changes, while the latter is defective because it \ncopies into a stored state rather than a true solution object and \nso the &quot;copy&quot; must be transferred back into a solution object \nbefore it can be used.  It would thus be a quite notable \nsimplification to our code to be able to do a true deep copy using \nan intrinsic function.\n\nBeyond that, this is all embedded in a loop that calls A several \ndozen times.  Thus, unless there&#39;s some feature in the Cantera \ncode that can realize that the relevant data file is already loaded \n(and I admit to having no idea if such a feature is present or \nnot), it will need to reload gri30.xml twice in every step of the \nloop when the copies are made, slowing things down quite \nnotably.  A deep copy would make it quite simple to avoid this.\n\n- Brooks\n\n--- In cantera@yahoogroups.com, David Goodwin &lt;dgoodwin@c...&gt; wrote:\n&gt; Brooks -\n&gt; \n&gt; As you&#39;ve discovered, a copy operation in Matlab of a Cantera object is  \n&gt; a &#39;shallow&#39; copy operation, because the Matlab object really just holds  \n&gt; a pointer. The same is true in Python.\n&gt; The easiest way to create two independent versions of any Cantera  \n&gt; object is to construct each one independently, for example:\n&gt; \n&gt; g = air;\n&gt; h = air;\n&gt; \n&gt; This seems to me to be just about as easy as writing &#39;h = g,&#39; so I  \n&gt; wonder if implementing a &#39;deep&#39; copy operation is really worth it.  \n&gt; Comments, anyone?\n&gt; \n&gt; Dave G.\n\n\n\n"}}