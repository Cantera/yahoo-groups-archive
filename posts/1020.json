{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":228974497,"authorName":"Martin Skov Skj√∏th-Rasmussen","from":"=?iso-8859-1?q?Martin_Skov_Skj=F8th-Rasmussen?= &lt;msr@...&gt;","profile":"msrasmus","replyTo":"LIST","senderId":"sSs3fLtXDx2crdjFuB84MyxFeoISr6OR4k40ddZeWV2s1KBBbqFPCa8kpyQ5IQXNmkHbP5pVqQO-S5SipzQ84bfxJqGlnKTAoiwYIAaLOrty88glA3-NetSJaxzzq9r8Fipd9jFB","spamInfo":{"isSpam":false,"reason":"12"},"subject":"Generating flamelet libraries - BilgerMixtureFraction(Y)?","postDate":"1130838015","msgId":1020,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGRrN2Q1ditrbGs2QGVHcm91cHMuY29tPg=="},"prevInTopic":0,"nextInTopic":0,"prevInTime":1019,"nextInTime":1021,"topicId":1020,"numMessagesInTopic":1,"msgSnippet":"I have tried to create a script to generate a flamelet library similar to the one presented at the workshop in Chicago 2004. The counter flow flame simulations","rawEmail":"Return-Path: &lt;msr@...&gt;\r\nX-Sender: msr@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nReceived: (qmail 62291 invoked from network); 1 Nov 2005 09:41:44 -0000\r\nReceived: from unknown (66.218.66.216)\n  by m28.grp.scd.yahoo.com with QMQP; 1 Nov 2005 09:41:44 -0000\r\nReceived: from unknown (HELO n25.bulk.scd.yahoo.com) (66.94.237.54)\n  by mta1.grp.scd.yahoo.com with SMTP; 1 Nov 2005 09:41:44 -0000\r\nComment: DomainKeys? See http://antispam.yahoo.com/domainkeys\r\nReceived: from [66.218.69.1] by n25.bulk.scd.yahoo.com with NNFMP; 01 Nov 2005 09:40:18 -0000\r\nReceived: from [66.218.66.86] by mailer1.bulk.scd.yahoo.com with NNFMP; 01 Nov 2005 09:40:18 -0000\r\nDate: Tue, 01 Nov 2005 09:40:15 -0000\r\nTo: cantera@yahoogroups.com\r\nMessage-ID: &lt;dk7d5v+klk6@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:12:0:0\r\nFrom: =?iso-8859-1?q?Martin_Skov_Skj=F8th-Rasmussen?= &lt;msr@...&gt;\r\nSubject: Generating flamelet libraries - BilgerMixtureFraction(Y)?\r\nX-Yahoo-Group-Post: member; u=228974497; y=cqKPSVZkll16ad4hMZc30gSMPD-ZuksvlX-viwr8M4Dil1M\r\nX-Yahoo-Profile: msrasmus\r\n\r\nI have tried to create a script to generate a flamelet library \nsimilar to =\r\nthe one presented at the workshop in Chicago 2004. The \ncounter flow flame =\r\nsimulations runs, but appearantly the script \nrequires a currently undefine=\r\nd function - the BilgerMixtureFraction\n(Y).\n\nI would truely appreciate some=\r\n help to solve this problem, and have \nattached my complete python script b=\r\nelow\n\nBest regards,\nMartin\n\n\n##############################################=\r\n###################\n#                                                      =\r\n         #\n#     CANTERA Script to generate generic flamelet libraries     =\r\n#\n#                                                               #\n#######=\r\n##########################################################\n\n# Initialize CA=\r\nNTERA\nfrom Cantera import *\nfrom Cantera.OneD import *\nfrom Cantera.OneD.Co=\r\nunterFlame import CounterFlame\nfrom Cantera.num import array\n\n# Initializat=\r\nion of Reference conditions\np      =3D OneAtm # pressure\ntin_f  =3D 300.0  =\r\n# fuel inlet temperature\ntin_o  =3D 300.0  # oxidizer inlet temperature\nmdo=\r\nt_o =3D 0.5    # kg/m^2/s\nmdot_f =3D 0.25   # kg/m^2/s\nL      =3D 0.02   # =\r\nm\n\ncomp_o =3D &#39;O2:0.21, N2:0.78, AR:0.01&#39;; # air composition\ncomp_f =3D &#39;CH=\r\n4:1&#39;;                     # fuel composition\n\n# define initial grid and tol=\r\nerances\n# distance between inlets is 2 cm; start with an evenly-spaced 11-\n=\r\npoint grid\ninitial_grid =3D L*array([0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7=\r\n, 0.8, \n0.9, 1.0],&#39;d&#39;)\ntol_ss    =3D [1.0e-5, 1.0e-9]          # [rtol, ato=\r\nl] for steady-state \nproblem\ntol_ts    =3D [1.0e-3, 1.0e-9]          # [rto=\r\nl, atol] for time stepping\nloglevel  =3D 1                         # amount=\r\n of diagnostic output \n(0 to 5)\nrefine_grid =3D 1                       # 1=\r\n to enable refinement, 0 to \ndisable\nNfl=3D80                              =\r\n  # number of flamalets to compute\n\n# Here we use GRI-Mech 3.0 with mixture=\r\n-averaged transport properties.\ngas =3D GRI30(&#39;Mix&#39;)\n# Number of species\nns=\r\np =3D gas.nSpecies()\n# Number of elements\nnel =3D gas.nElements()\n# Molar M=\r\nasses\nmmas =3D gas.molarMasses()\n# Atomic Weights\nawgt =3D gas.atomicWeight=\r\ns()\n\n# Define auxiliary function to write flamelet solutions into your \nlib=\r\nrary file.\ndef writeFlamelet(f, list):\n   for item in list:\n      if type(i=\r\ntem) =3D=3D types.StringType:\n         f.write(item+&#39; &#39;)\n      else:\n      =\r\n   f.write(`item`+&#39; &#39;)\n   f.write(&#39;&#92;n&#39;)\n\n# Open flamelet library file and w=\r\nrite number of solutions inside\nflt =3D open(&#39;ch4.flt&#39;,&#39;w&#39;)\nflt.write(&#39;N =\r\n=3D &#39; + str(Nfl) + &#39;&#92;n&#39;)\n\n# Create flame\nf =3D CounterFlame(gas =3D gas, gr=\r\nid =3D initial_grid)\n# set the error tolerances\nf.set(tol =3D tol_ss, tol_t=\r\nime =3D tol_ts)\nf.fuel_inlet.set(massflux =3D mdot_f,\n                 mole=\r\n_fractions =3D comp_f,\n                 temperature =3D tin_f)\nf.oxidizer_i=\r\nnlet.set(massflux =3D mdot_o,\n                     mole_fractions =3D comp_=\r\no,\n                     temperature =3D tin_o)\n\n# construct the initial sol=\r\nution estimate. To do so, it is necessary \nto specify the fuel\n# species.\nf=\r\n.init(fuel =3D &#39;CH4&#39;)\n\n# Set the state of the two inlets\nampl =3D 1.0\nfor i=\r\nx in range(Nfl):\n   mflux =3D mdot_f*ampl\n   f.fuel_inlet.setMdot(mflux)\n  =\r\n mflux =3D mdot_o*ampl\n   f.oxidizer_inlet.setMdot(mflux)\n\n   # First disab=\r\nle the energy equation and solve the problem without \nrefining the grid\n   =\r\nf.set(energy =3D &#39;off&#39;)\n   f.solve(loglevel, 0)\n\n   # Now specify grid refi=\r\nnement, turn on the energy equation, and \nsolve again.\n   f.setRefineCriter=\r\nia(ratio =3D 200.0, slope =3D 0.1, curve =3D 0.2, prune \n=3D 0.02)\n   f.set=\r\n(energy =3D &#39;on&#39;)\n   f.solve(1)\n\n   # write solution\n   nz =3D f.flame.nPoi=\r\nnts()\n   z =3D f.flame.grid()\n   T =3D f.T()\n   u =3D f.u()\n   V =3D f.V()\n=\r\n\n   for n in range(nz):\n      f.setGasState(n)\n      Y =3D gas.massFraction=\r\ns()\n      # Define Bilger mixture fraction\n      Zbilger =3D BilgerMixtureF=\r\nraction(Y)\n\n      writeFlamelet(flt, [Zbilger, z[n], u[n], V[n], T[n]]+list=\r\n\n(gas.massFractions()))\n\n   # Increment mass flux amplification factor\n   a=\r\nmpl =3D ampl + 0.2\n\n# End of loop and close of flamalet library file\nflt.cl=\r\nose()\n\n\n\n\n"}}