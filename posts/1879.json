{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":32942367,"authorName":"Moffat, Harry K","from":"&quot;Moffat, Harry K&quot; &lt;hkmoffa@...&gt;","profile":"hkmoffat","replyTo":"LIST","senderId":"p-m0urQBqHiFrSh7O0WDiezvX8VDe7rxR9ukDo_NBLjthdUmmpBvmYoQnaz00euTwDjjwp5aTOQUm0EwpuxP6Bw6xWCCQtQoKwv4HgQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"RE: [cantera] Thread safety of MultiTransport","postDate":"1206571494","msgId":1879,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PDI4RjgzMzQ3RTdFMUJENEU4Qzc4NTYwQjNCRTEzQjg1MEMxNUVERjYzOEBFUzAxU05MTlQuc3JuLnNhbmRpYS5nb3Y+","inReplyToHeader":"PGZzM21kZStwczJkQGVHcm91cHMuY29tPg==","referencesHeader":"PGZzM21kZStwczJkQGVHcm91cHMuY29tPg=="},"prevInTopic":1863,"nextInTopic":1880,"prevInTime":1878,"nextInTime":1880,"topicId":1862,"numMessagesInTopic":6,"msgSnippet":"Hi Ray, I duplicated your example using a POSIX threads implementation (source code enclosed). I didn t find any problems with MultiTransport from your direct","rawEmail":"Return-Path: &lt;hkmoffa@...&gt;\r\nX-Sender: hkmoffa@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nX-Received: (qmail 66892 invoked from network); 26 Mar 2008 22:45:03 -0000\r\nX-Received: from unknown (66.218.67.95)\n  by m36.grp.scd.yahoo.com with QMQP; 26 Mar 2008 22:45:03 -0000\r\nX-Received: from unknown (HELO sentry.sandia.gov) (132.175.109.21)\n  by mta16.grp.scd.yahoo.com with SMTP; 26 Mar 2008 22:45:03 -0000\r\nX-Received: from [134.253.165.160] by sentry.sandia.gov with ESMTP (SMTP\n Relay 01 (Email Firewall v6.3.1)); Wed, 26 Mar 2008 16:44:55 -0600\r\nX-Server-Uuid: 6CEB1540-FE13-491B-9872-FD67060ED864\r\nX-Received: from ES01SNLNT.srn.sandia.gov ([134.253.165.151]) by\n Cas2.srn.sandia.gov ([134.253.165.160]) with mapi; Wed, 26 Mar 2008\n 16:44:55 -0600\r\nTo: &quot;cantera@yahoogroups.com&quot; &lt;cantera@yahoogroups.com&gt;\r\nDate: Wed, 26 Mar 2008 16:44:54 -0600\r\nThread-Topic: [cantera] Thread safety of MultiTransport\r\nThread-Index: AciMUmQambPGNVSmSweTUjLD/uN/RgDPllxw\r\nMessage-ID: &lt;28F83347E7E1BD4E8C78560B3BE13B850C15EDF638@...&gt;\r\nReferences: &lt;fs3mde+ps2d@...&gt;\r\nIn-Reply-To: &lt;fs3mde+ps2d@...&gt;\r\nAccept-Language: en-US\r\nContent-Language: en-US\r\nX-MS-Has-Attach: \r\nX-MS-TNEF-Correlator: \r\nacceptlanguage: en-US\r\nMIME-Version: 1.0\r\nX-TMWD-Spam-Summary: TS=20080326224456; SEV=2.2.2; DFV=B2008032617;\n IFV=2.0.4,4.0-9; AIF=B2008032617; RPD=5.02.0125; ENG=IBF;\n RPDID=7374723D303030312E30413031303230392E34374541443145372E303132392C73733D312C6667733D30;\n CAT=NONE; CON=NONE\r\nX-MMS-Spam-Filter-ID: B2008032617_5.02.0125_4.0-9\r\nX-WSS-ID: 6BF40E6D2DG2877374-01-01\r\nContent-Type: text/plain;\n charset=us-ascii\r\nContent-Transfer-Encoding: quoted-printable\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;Moffat, Harry K&quot; &lt;hkmoffa@...&gt;\r\nSubject: RE: [cantera] Thread safety of MultiTransport\r\nX-Yahoo-Group-Post: member; u=32942367; y=vLHJ-usgwqSNmybnpZTN5oTPJ9APT0IQ1FbrZBmXLOmZVfA\r\nX-Yahoo-Profile: hkmoffat\r\n\r\nHi Ray,\n  I duplicated your example using a POSIX threads implementation (s=\r\nource code enclosed). I didn&#39;t find any problems with MultiTransport from y=\r\nour direct example, but there were some issues.\n\n1) I didn&#39;t find any speed=\r\nup with using multiple threads unfortunately even though I&#39;m using a 2 cpu =\r\nworkstation with 2 cores per cpu ):. I wonder what I&#39;m doing wrong.\n\n2) I g=\r\not a seg fault at the very end of the application, iff I used more than 16 =\r\nthreads.\n\n3) If I called newTransport within the threads (see commented out=\r\n code) rather than setting up multiple MultiTransport objects before doing =\r\nthe parallel pthreads implementation I ran into segfaults during newTranspo=\r\nrt. This is definately a multiple threads issue and needs to be looked into=\r\n.\n\nI&#39;m new to multithreaded applications. Maybe someone could point out an =\r\nissue with my approach. I did compile using gcc and the -pthread compiler s=\r\nwitch. Essentially I&#39;m following the approach from\n https://computing.llnl.=\r\ngov/tutorials/pthreads/#Thread\n\nBest wishes,\nHarry\n\n\n#include &lt;stdio.h&gt;\n#in=\r\nclude &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;unistd.h&gt;\n\n\n#include &lt;Cante=\r\nra.h&gt;\n#include &lt;kernel/IdealGasPhase.h&gt;\n#include &lt;transport.h&gt;\n#include &lt;th=\r\nermo.h&gt;\n\nusing namespace Cantera;\n\n#define NUM_THREADS 8\n#define NUM_TEMPS =\r\n16*16\n\nstruct pTran {\n  int iTemp;\n  ThermoPhase *tpBase;\n  TransportFactor=\r\ny *tfBase;\n  ThermoPhase *tpThread;\n  Transport *p1Thread;\n};\n\nstruct pTran=\r\n ptran[NUM_THREADS];\nstd::vector&lt;double&gt; lambda(NUM_TEMPS, 0.0);\n\n// unsign=\r\ned long\npthread_t storID[NUM_THREADS];\n\n\nconst pthread_attr_t *att =3D 0;\n\n=\r\nint gI =3D 0;\nvoid * startThread(void *rrr) {\n  struct pTran *ppp =3D (stru=\r\nct pTran *) rrr;\n  //pthread_t sid =3D pthread_self();\n  //printf(&quot;starting=\r\n new thread %ld&#92;n&quot;, sid);\n  // fflush(stdout);\n  //ThermoPhase *tp =3D (ppp=\r\n-&gt;tpBase)-&gt;duplMyselfAsThermoPhase();\n  //IdealGasPhase *thermoP =3D dynami=\r\nc_cast &lt;IdealGasPhase *&gt; (tp);\n  //Transport *p1 =3D (ppp-&gt;tfBase)-&gt;newTran=\r\nsport(&quot;Multi&quot;, thermoP);\n\n  ThermoPhase *thermoP =3D ppp-&gt;tpThread;\n  Trans=\r\nport *p1 =3D ppp-&gt;p1Thread;\n\n  thermoP-&gt;setState_TPY(300.+5. * (ppp-&gt;iTemp)=\r\n, OneAtm, &quot;N2:3.76, O2:1.0&quot;);\n\n  lambda[ppp-&gt;iTemp] =3D p1-&gt;thermalConducti=\r\nvity();\n  //delete p1;\n  //delete thermoP;\n  pthread_exit((void *) 0);\n}\n\ni=\r\nnt main(int argc, void **argv) {\n  pthread_t storID[10];\n  void *    retnMs=\r\ng[10];\n  pthread_t * ttt;\n  const pthread_attr_t * att =3D 0;\n  void *tArgs=\r\n =3D 0;\n  tArgs =3D &gI;\n  bool doThreads =3D true;\n\n  XML_Node *xc =3D get=\r\n_XML_File(&quot;gri30.xml&quot;);\n  XML_Node * const xs =3D xc-&gt;findNameID(&quot;phase&quot;, &quot;=\r\ngri30_multi&quot;);\n\n\n  TransportFactory * transFac =3D TransportFactory::factor=\r\ny();\n  ThermoPhase *tp =3D newPhase(*xs);\n  for (int i =3D 0; i &lt; NUM_THREA=\r\nDS; i++) {\n    struct pTran *rrr =3D &ptran[i];\n    rrr-&gt;tpThread =3D tp-&gt;d=\r\nuplMyselfAsThermoPhase();\n    IdealGasPhase *thermoP =3D dynamic_cast &lt;Idea=\r\nlGasPhase *&gt; (rrr-&gt;tpThread);\n    rrr-&gt;p1Thread =3D transFac-&gt;newTransport(=\r\n&quot;Multi&quot;, thermoP);\n  }\n\n  clockWC tickTock;\n  int jTemp =3D 0;\n  do {\n    i=\r\nf (!doThreads) {\n      for (int i =3D 0; i &lt; NUM_THREADS; i++) {\n        pt=\r\nran[i].iTemp =3D jTemp;\n        ptran[i].tpBase =3D tp;\n        ptran[i].tf=\r\nBase =3D transFac;\n        startThread((void *)&ptran[i]);\n        jTemp++;=\r\n\n      }\n    } else {\n      for (int i =3D 0; i &lt; NUM_THREADS; i++) {\n     =\r\n   ptran[i].iTemp =3D jTemp;\n        ptran[i].tpBase =3D tp;\n        ptran[=\r\ni].tfBase =3D transFac;\n\n        int en =3D pthread_create(&storID[i], att,=\r\n &startThread, (void *)&ptran[i]);\n        if (en !=3D 0) {\n          print=\r\nf(&quot;Error condition from pthread_create(): %d&#92;n&quot;, en);\n          exit(-1);\n =\r\n       }\n        //printf(&quot;new thead id =3D %ld&#92;n&quot;, storID[i]);\n        jTe=\r\nmp++;\n      }\n    }\n    if (doThreads) {\n      for (int i =3D 0; i &lt; NUM_TH=\r\nREADS; i++) {\n        ttt =3D &storID[i];\n        int rc =3D pthread_join(s=\r\ntorID[i], &(retnMsg[i]));\n        if (rc !=3D 0) {\n          printf(&quot;Error =\r\ncondition from pthread_jon(): %d&#92;n&quot;, rc);\n          exit(-1);\n        }\n   =\r\n     //printf(&quot;returned from thread %ld&#92;n&quot;, storID[i]);\n      }\n    }\n\n  } =\r\nwhile (jTemp &lt; NUM_TEMPS);\n  double tt =3D tickTock.secondsWC();\n\n\n  std::c=\r\nout &lt;&lt; &quot;Thermal conductivities as a function of temperature:&#92;n&quot;;\n  for (int=\r\n j =3D 0; j &lt;  NUM_TEMPS; j++) {\n    std::cout &lt;&lt; 300.+5.*j &lt;&lt;&quot; &#92;t &quot; &lt;&lt; lam=\r\nbda[j] &lt;&lt; std::endl;\n  }\n  printf(&quot;elapsed time =3D %g&#92;n&quot;, tt);\n  pthread_e=\r\nxit(NULL);\n  return 0;\n}\n\n\n\nHarry Moffat                                   =\r\n          (w) (505) 844-6912\nNanoscale and Reactive Processes            (f=\r\n)   (505) 844-8251\nSandia National Laboratories                            =\r\n        hkmoffa@...\nP. O. Box 5800-0836\nAlbuquerque, NM 87185-0836\n\n=\r\n-----Original Message-----\nFrom: cantera@yahoogroups.com [mailto:cantera@ya=\r\nhoogroups.com] On Behalf Of Ray Speth\nSent: Saturday, March 22, 2008 1:25 P=\r\nM\nTo: cantera@yahoogroups.com\nSubject: [cantera] Thread safety of MultiTran=\r\nsport\n\nHi,\n\nI have been having some issues using objects of class MultiTran=\r\nsport in a multithreaded application. Specifically, I am having trouble wit=\r\nh the functions thermalConductivity and get thermalDiffCoeffs, which seem t=\r\no be the only two functions which involve calls to solveLMatrixEquation. I =\r\nhave included below an example program that experiences the problem. The er=\r\nror reported is (usually)\n\nterminate called after throwing an instance of &#39;=\r\nCantera::CanteraError&#39;\n\nIf the call to omp_set_num_threads(2) is changed to=\r\n omp_set_num_threads(1), the program works fine. This is on a 64-bit Linux =\r\nmachine, using GCC 4.2. I have built Cantera with the Thread-safe option tu=\r\nrned on. Is the issue with these functions, or is there something else I ne=\r\ned to do to be able to use Multitransport objects in a parallel code?\n\nAny =\r\nhelp in resolving this would be greatly appreciated.\n\n----------\n\n#include =\r\n&lt;cantera/Cantera.h&gt;\n#include &lt;cantera/kernel/IdealGasPhase.h&gt; #include &lt;can=\r\ntera/transport.h&gt; #include &lt;cantera/thermo.h&gt; #include &lt;omp.h&gt; #include &lt;ve=\r\nctor&gt;\n\nusing namespace Cantera;\n\nvoid omptest(void)\n{\n  int N =3D 10;\n  omp=\r\n_set_num_threads(2);\n\n  XML_Node *xc =3D get_XML_File(&quot;gri30.xml&quot;);\n  XML_N=\r\node * const xs =3D xc-&gt;findNameID(&quot;phase&quot;, &quot;gri30_multi&quot;);\n\n  std::vector&lt;I=\r\ndealGasPhase*&gt; thermoP(N);\n  std::vector&lt;MultiTransport*&gt; transportP(N);\n\n =\r\n TransportFactory* transFac =3D TransportFactory::factory();\n\n  for (int i=\r\n=3D0; i&lt;N; i++) {\n    ThermoPhase* tp =3D newPhase(*xs);\n    thermoP[i] =3D=\r\n dynamic_cast &lt;IdealGasPhase*&gt;(tp);\n    Transport* p1 =3D transFac-&gt;newTran=\r\nsport(&quot;Multi&quot;,thermoP[i]);\n    transportP[i] =3D dynamic_cast &lt;MultiTranspo=\r\nrt*&gt;(p1);\n  }\n\n  #pragma omp parallel for\n  for (int i=3D0; i&lt;N; i++) {\n   =\r\n thermoP[i]-&gt;setState_TPY(300+50*i,OneAtm,&quot;N2:3.76, O2:1.0&quot;);\n  }\n\n  std::v=\r\nector&lt;double&gt; lambda(N);\n\n  #pragma omp parallel for\n  for (int i=3D0; i&lt;N;=\r\n i++) {\n    lambda[i] =3D transportP[i]-&gt;thermalConductivity();\n  }\n\n  for =\r\n(int i=3D0; i&lt;N; i++) {\n    std::cout &lt;&lt; lambda[i] &lt;&lt; std::endl;\n  }\n}\n\nint=\r\n main(int argc, char** argv)\n{\n   try {\n     omptest();\n   } catch (Cantera=\r\nError) {\n     showErrors(cout);\n   }\n}\n\n\n\n---------------------------------=\r\n---\n\nYahoo! Groups Links\n\n\n\n\n\n\n"}}