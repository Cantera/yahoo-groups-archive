{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":259422991,"authorName":"nedatlund","from":"&quot;nedatlund&quot; &lt;edward.blurock@...&gt;","profile":"nedatlund","replyTo":"LIST","senderId":"lmY7zyunYF4sT9OCBpG5EIIH-6R9WWYB1SMG2ebw0dYa00q4V0STb48WNRLOv_x6GJ8cmeSAfV89UqXVNKKfC7XaE-3Yf3Gdq1I0Dc5OiSSvNw","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Ethanol: Adiabatic Constant Pressure Ignition Delay Times with &#39;Reactor&#39;","postDate":"1190835829","msgId":1733,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGZkZWNwbCtkN3A3QGVHcm91cHMuY29tPg==","inReplyToHeader":"PGZkZTRqdityc2xuQGVHcm91cHMuY29tPg=="},"prevInTopic":1732,"nextInTopic":0,"prevInTime":1732,"nextInTime":1734,"topicId":1732,"numMessagesInTopic":2,"msgSnippet":"Sorry, I mean Reactor class ... and the","rawEmail":"Return-Path: &lt;edward.blurock@...&gt;\r\nX-Sender: edward.blurock@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nReceived: (qmail 58155 invoked from network); 26 Sep 2007 19:43:51 -0000\r\nReceived: from unknown (69.147.108.201)\n  by m56.grp.scd.yahoo.com with QMQP; 26 Sep 2007 19:43:51 -0000\r\nReceived: from unknown (HELO n33b.bullet.sp1.yahoo.com) (209.131.38.215)\n  by mta2.grp.re1.yahoo.com with SMTP; 26 Sep 2007 19:43:50 -0000\r\nReceived: from [216.252.122.217] by n33.bullet.sp1.yahoo.com with NNFMP; 26 Sep 2007 19:43:50 -0000\r\nReceived: from [66.218.69.3] by t2.bullet.sp1.yahoo.com with NNFMP; 26 Sep 2007 19:43:50 -0000\r\nReceived: from [66.218.66.75] by t3.bullet.scd.yahoo.com with NNFMP; 26 Sep 2007 19:43:50 -0000\r\nDate: Wed, 26 Sep 2007 19:43:49 -0000\r\nTo: cantera@yahoogroups.com\r\nMessage-ID: &lt;fdecpl+d7p7@...&gt;\r\nIn-Reply-To: &lt;fde4jv+rsln@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;nedatlund&quot; &lt;edward.blurock@...&gt;\r\nSubject: Re: Ethanol: Adiabatic Constant Pressure Ignition Delay Times with &#39;Reactor&#39;\r\nX-Yahoo-Group-Post: member; u=259422991; y=pC9AeWmyOjPPDi21AqUwRnVBtYYwu143MFhHoT3TvhInHqCW\r\nX-Yahoo-Profile: nedatlund\r\n\r\nSorry, I mean Reactor class\n\n--- In cantera@yahoogroups.com, &quot;nedatlund&quot; &lt;e=\r\ndward.blurock@...&gt; wrote:\n&gt;\n&gt; I am trying to use the Reaction.h class direc=\r\ntly to model adiabatic\n&gt; constant pressure calculations with the Marinov sc=\r\nheme -- with the\n&gt; appropriate changes to compile it -- for ethanol. I am u=\r\nsing the\n&gt; kinetics_example1.cpp as a base, with the wall effects taken out=\r\n (well\n&gt; that was one of my iterations is looking at this problem). \n&gt; \n&gt; F=\r\nor the stochiometric case with 1.25% ethanol, 3.75% O2 (N2 is the\n&gt; inert g=\r\nas) the key changes I made to the example were:\n&gt; \n&gt;  IdealGasMix* gg =3D n=\r\new IdealGasMix(&quot;ethanol_mech.cti&quot;, &quot;ethanol_mech&quot;);\n&gt; \n&gt; gas.setState_TPX(1=\r\n250.0, OneAtm*3.5, &quot;c2h5oh:1.25, o2:3.75, n2:95.0&quot;);\n&gt; \n&gt; (the Wall class w=\r\nas commented out)\n&gt; \n&gt; The ignition delay time for this case should be arou=\r\nnd .8ms (from fig\n&gt; 11, in the original paper)\n&gt; \n&gt; I am probably doing som=\r\nething trivially stupid, but at the moment I do\n&gt; not know..\n&gt; Any help wou=\r\nld be appreciated.\n&gt; \n&gt; Edward Blurock\n&gt; =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=\r\n\n&gt; The listing....\n&gt; \n&gt; ///////////////////////////////////////////////////=\r\n//////////\n&gt; //\n&gt; //  zero-dimensional kinetics example program\n&gt; //\n&gt; //  =\r\n$Author: dggoodwin $\n&gt; //  $Revision: 1.10 $\n&gt; //  $Date: 2006/11/27 21:43:=\r\n35 $\n&gt; //\n&gt; //  copyright California Institute of Technology 2002\n&gt; //\n&gt; //=\r\n///////////////////////////////////////////////////////////\n&gt; \n&gt; // turn of=\r\nf warnings under Windows\n&gt; #ifdef WIN32\n&gt; #pragma warning(disable:4786)\n&gt; #=\r\npragma warning(disable:4503)\n&gt; #endif\n&gt; \n&gt; #include &lt;cantera/Cantera.h&gt;\n&gt; #=\r\ninclude &lt;cantera/zerodim.h&gt;\n&gt; #include &lt;cantera/IdealGasMix.h&gt;\n&gt; #include &lt;=\r\ntime.h&gt;\n&gt; #include &quot;example_utils.h&quot;\n&gt; using namespace Cantera;\n&gt; using nam=\r\nespace std;\n&gt; \n&gt; // Kinetics example. This is written as a function so that=\r\n one \n&gt; // driver program can run multiple examples.\n&gt; // The action taken =\r\ndepends on input parameter job:\n&gt; //     job =3D 0:   print a one-line desc=\r\nription of the example.\n&gt; //     job =3D 1:   print a longer description\n&gt; =\r\n//     job =3D 2:   print description, then run the example.\n&gt; //\n&gt; \n&gt; // N=\r\note: although this simulation can be done in C++, as shown here,\n&gt; // it is=\r\n much easier in Python or Matlab!\n&gt; \n&gt; int kinetics_example1(int job);\n&gt; \n&gt;=\r\n \n&gt; // main program\n&gt; int main(int argc, char** argv) {\n&gt; \n&gt;     cout &lt;&lt; en=\r\ndl\n&gt;          &lt;&lt; &quot;-----------------------------------&quot; &lt;&lt; endl\n&gt;          &lt;=\r\n&lt; &quot;       Cantera C++ examples        &quot; &lt;&lt; endl\n&gt;          &lt;&lt; &quot;------------=\r\n-----------------------&quot; &lt;&lt; endl;\n&gt; \n&gt;     int i =3D kinetics_example1(2);\n=\r\n&gt;     return i;\n&gt; }\n&gt; \n&gt; \n&gt; int kinetics_example1(int job) {\n&gt; \n&gt;     try {=\r\n\n&gt; \n&gt;         cout &lt;&lt; &quot;Ignition simulation using class IdealGasMix &quot;\n&gt;     =\r\n         &lt;&lt; &quot;with file ethanol_mech.xml.&quot; \n&gt;              &lt;&lt; endl;\n&gt; \n&gt;    =\r\n     if (job &gt;=3D 1) {\n&gt;             cout &lt;&lt; &quot;Constant-pressure ignition of=\r\n a &quot;\n&gt;                  &lt;&lt; &quot;C2H5OH/O2/N2&quot;\n&gt;                 &quot; mixture &#92;nbeg=\r\ninning at T =3D 1250 K and P =3D 3.5 atm.&quot;\n&gt; &lt;&lt; endl;\n&gt;         }\n&gt;        =\r\n if (job &lt; 2) return 0;\n&gt; \n&gt;         // header\n&gt;         writeCanteraHeader=\r\n(cout);\n&gt; \n&gt;         // create an ideal gas mixture that corresponds to GRI=\r\n-Mech\n&gt;         // 3.0\n&gt;         IdealGasMix* gg =3D new IdealGasMix(&quot;ethan=\r\nol_mech.xml&quot;,\n&gt; &quot;ethanol_mech&quot;);\n&gt;         IdealGasMix& gas =3D *gg;\n&gt; \n&gt;  =\r\n       // set the state\n&gt;         gas.setState_TPX(1250.0, OneAtm*3.5, &quot;c2h=\r\n5oh:1.25, o2:3.75,\n&gt; n2:95.0&quot;);\n&gt;         int kk =3D gas.nSpecies();\n&gt; \n&gt;  =\r\n       // create a reactor\n&gt;         Reactor r;\n&gt; \n&gt;         // create a re=\r\nservoir to represent the environment\n&gt;         Reservoir env;\n&gt; \n&gt;         =\r\n// specify the thermodynamic property and kinetics managers\n&gt;         r.set=\r\nThermoMgr(gas);\n&gt;         r.setKineticsMgr(gas);\n&gt;         env.setThermoMgr=\r\n(gas);\n&gt; \n&gt;         // create a flexible, insulating wall between the react=\r\nor\nand the\n&gt;         // environment\n&gt;         //Wall w;\n&gt;         //w.insta=\r\nll(r,env);\n&gt; \n&gt;         // set the &quot;Vdot coefficient&quot; to a large value, in =\r\norder to\n&gt;         // approach the constant-pressure limit; see the documen=\r\ntation \n&gt;         // for class Reactor\n&gt;         //w.setExpansionRateCoeff(=\r\n1.e9);\n&gt;         //w.setArea(1.0);\n&gt; \n&gt;         // create a container objec=\r\nt to run the simulation\n&gt;         // and add the reactor to it\n&gt;         Re=\r\nactorNet sim;\n&gt;         sim.addReactor(&r);\n&gt; \n&gt;         double tm;\n&gt;      =\r\n   double dt =3D 1.e-5;    // interval at which output is written\n&gt;        =\r\n int nsteps =3D 100;     // number of intervals\n&gt; \n&gt;         // create a 2D=\r\n array to hold the output variables,\n&gt;         // and store the values for =\r\nthe initial state\n&gt;         Array2D soln(kk+4, 1);\n&gt;         saveSoln(0, 0.=\r\n0, gas, soln);\n&gt; \n&gt;         // main loop\n&gt;         clock_t t0 =3D clock();\n=\r\n&gt;         for (int i =3D 1; i &lt;=3D nsteps; i++) {\n&gt;             tm =3D i*dt=\r\n;\n&gt;             sim.advance(tm);\n&gt;             saveSoln(tm, gas, soln);\n&gt; \t=\r\n}\n&gt; \n&gt;         clock_t t1 =3D clock();\n&gt; \n&gt; \n&gt;         // make a Tecplot da=\r\nta file and an Excel spreadsheet\n&gt;         string plotTitle =3D &quot;kinetics e=\r\nxample 1: constant-pressure\n&gt; ignition&quot;;\n&gt;         plotSoln(&quot;kin1.dat&quot;, &quot;TE=\r\nC&quot;, plotTitle, gas, soln);\n&gt;         plotSoln(&quot;kin1.csv&quot;, &quot;XL&quot;, plotTitle, =\r\ngas, soln);\n&gt; \n&gt; \n&gt;         // print final temperature and timing data\n&gt;   =\r\n      doublereal tmm =3D 1.0*(t1 - t0)/CLOCKS_PER_SEC;\n&gt;         cout &lt;&lt; &quot; =\r\nTfinal =3D &quot; &lt;&lt; r.temperature() &lt;&lt; endl;\n&gt;         cout &lt;&lt; &quot; time =3D &quot; &lt;&lt; =\r\ntmm &lt;&lt; endl;\n&gt;         cout &lt;&lt; &quot; number of residual function evaluations =\r\n=3D &quot; \n&gt;              &lt;&lt; sim.integrator().nEvals() &lt;&lt; endl;\n&gt;         cout =\r\n&lt;&lt; &quot; time per evaluation =3D &quot; &lt;&lt;\n&gt; tmm/sim.integrator().nEvals() \n&gt;       =\r\n       &lt;&lt; endl &lt;&lt; endl;\n&gt;         cout &lt;&lt; &quot;Output files:&quot; &lt;&lt; endl\n&gt;        =\r\n      &lt;&lt; &quot;  kin1.csv    (Excel CSV file)&quot; &lt;&lt; endl\n&gt;              &lt;&lt; &quot;  kin1=\r\n.dat    (Tecplot data file)&quot; &lt;&lt; endl;\n&gt; \n&gt; #define DEBUG_HKM\n&gt; #ifdef DEBUG=\r\n_HKM\n&gt; \tdelete gg;\n&gt; #endif\n&gt;         return 0;\n&gt;     }\n&gt; \n&gt;     // handle =\r\nexceptions thrown by Cantera\n&gt;     catch (CanteraError) {\n&gt;         showErr=\r\nors(cout);\n&gt;         cout &lt;&lt; &quot; terminating... &quot; &lt;&lt; endl;\n&gt;         appdelet=\r\ne();\n&gt;         return -1;\n&gt;     }\n&gt; }\n&gt;\n\n\n\n"}}