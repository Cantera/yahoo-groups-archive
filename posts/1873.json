{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":310228072,"authorName":"avmokhov","from":"&quot;avmokhov&quot; &lt;avmokhov@...&gt;","profile":"avmokhov","replyTo":"LIST","senderId":"i7ig4CY-B73H9TYN1OqfVAezb_LEIGKGOmm-ZzcfMeBhh8kl8-L0zz7lg-7twNRESGR297YwxhH31TFHAWn5UkEbyZL6XQ","spamInfo":{"isSpam":false,"reason":"6"},"subject":"Re: Freely Propagating Flame Example in Matlab","postDate":"1206300393","msgId":1873,"canDelete":false,"contentTrasformed":false,"systemMessage":false,"headers":{"messageIdInHeader":"PGZzNmF0OSs5YnJhQGVHcm91cHMuY29tPg==","inReplyToHeader":"PGZxdWk0bSs5ZGE4QGVHcm91cHMuY29tPg=="},"prevInTopic":1868,"nextInTopic":1876,"prevInTime":1872,"nextInTime":1874,"topicId":1855,"numMessagesInTopic":4,"msgSnippet":"Hi Chris, As a first step I would like to recommend you to read a manual for the Premix program from the Chemkin suite where a very good explanation of the","rawEmail":"Return-Path: &lt;avmokhov@...&gt;\r\nX-Sender: avmokhov@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nX-Received: (qmail 2297 invoked from network); 23 Mar 2008 19:26:35 -0000\r\nX-Received: from unknown (66.218.67.94)\n  by m48.grp.scd.yahoo.com with QMQP; 23 Mar 2008 19:26:35 -0000\r\nX-Received: from unknown (HELO n29a.bullet.scd.yahoo.com) (66.94.237.31)\n  by mta15.grp.scd.yahoo.com with SMTP; 23 Mar 2008 19:26:35 -0000\r\nX-Received: from [66.218.69.2] by n29.bullet.scd.yahoo.com with NNFMP; 23 Mar 2008 19:26:35 -0000\r\nX-Received: from [66.218.67.197] by t2.bullet.scd.yahoo.com with NNFMP; 23 Mar 2008 19:26:35 -0000\r\nDate: Sun, 23 Mar 2008 19:26:33 -0000\r\nTo: cantera@yahoogroups.com\r\nMessage-ID: &lt;fs6at9+9bra@...&gt;\r\nIn-Reply-To: &lt;fqui4m+9da8@...&gt;\r\nUser-Agent: eGroups-EW/0.82\r\nMIME-Version: 1.0\r\nContent-Type: text/plain; charset=&quot;ISO-8859-1&quot;\r\nContent-Transfer-Encoding: quoted-printable\r\nX-Mailer: Yahoo Groups Message Poster\r\nX-Yahoo-Newman-Property: groups-compose\r\nX-eGroups-Msg-Info: 1:6:0:0:0\r\nFrom: &quot;avmokhov&quot; &lt;avmokhov@...&gt;\r\nSubject: Re: Freely Propagating Flame Example in Matlab\r\nX-Yahoo-Group-Post: member; u=310228072; y=CDHhgd7YTAMtp12Q5Xva0mVQxMISDhz_iWLTtnPxuQjbliU\r\nX-Yahoo-Profile: avmokhov\r\n\r\nHi Chris,\nAs a first step I would like to recommend you to read a manual fo=\r\nr \nthe Premix program from the Chemkin suite where a very good \nexplanation=\r\n of the differences between the burner-stabilized and free \nflame and the s=\r\nolution method are given. Cantera is using exactly the \nsame algorithm to s=\r\nolve the 1D flame problem. What is different in \ncomparison with Premix, Ca=\r\nntera considers 1D flame as a limiting case \nof axisymmetric flame. Unfortu=\r\nnately, I don&#39;t use both Python and \nMatlab, therefore, I cannot answer all=\r\n your questions. In particular,\n1.\tTfix is a fixed temperature necessary to=\r\n remove translational \nsymmetry from the governing equations. For free flam=\r\nes, if T(x) is \nsolution, T(x+x0) is also solution with arbitrary x0. By pu=\r\ntting \ntemperature in some point equal to some fixed temperature we fix the=\r\n \nflame position. Usually you can put Tfix equal to 800 K.\n2.\tZ1 is a relat=\r\nive position (from 0 to 1, usually 0.7). Zero \napproximation for all variab=\r\nles is linear changed on [0,Z1] from \ninlet to equilibrium values. You shou=\r\nld play with this value to reach \nfaster convergence of solution. Clearly, =\r\nif you make Z1 smaller, you \nexpect high burning velocities (flame thicknes=\r\ns is small).\n\nHope that this helps, \nBest regards, Anatoli\n\n\n--- In cantera=\r\n@yahoogroups.com, &quot;transfertoschool&quot; &lt;ademator@...&gt; \nwrote:\n&gt;\n&gt; I have been=\r\n looking to create a Matlab model of a freely propagating\n&gt; flame. The pyth=\r\non example free_h2_air.py uses FreeFlame.py. I have\n&gt; started out by first =\r\ncomparing the provided demos Flame1.m and\n&gt; flame1.py in an attempt to unde=\r\nrstand the differences between the\n&gt; simulations in Matlab and Python. I ha=\r\nve also been looking through \nthe\n&gt; tutorial files provided with Cantera fo=\r\nr both Matlab and Python.\n&gt; \n&gt; I believe that the following statement in th=\r\ne python file flame1.py\n&gt; \n&gt; f =3D BurnerFlame(gas =3D gas, grid =3D inital=\r\n_grid)\n&gt; \n&gt; is equivalent to the series of statements found throughout the =\r\n\nMatlab\n&gt; file Flame1.m\n&gt; \n&gt; 1)  f =3D AxisymmetricFlow(gas, &#39;flow&#39;);\n&gt; 2) =\r\n set(f, &#39;P&#39;, p, &#39;grid&#39;, inital_grid);\n&gt; 3)  burner =3D Inlet(`burner&#39;);\n&gt; 4=\r\n)  s =3D Outlet(`out&#39;);\n&gt; 5)  f1 =3D flame(gas, burner, f, s);\n&gt; 6)  setMax=\r\nJacAge(f1, max_jacobian_age(1), max_jacobian_age(2));\n&gt; \n&gt; From there I wen=\r\nt and compared the Pyhton files BurnerFlame.py to\n&gt; FreeFlame.py in order t=\r\no see what is unique about the FreeFlame\n&gt; simulation and I concluded the f=\r\nollowing.\n&gt; \n&gt; FreeFlame.py introduces a few extra statements when compared=\r\n to\n&gt; BurnerFlame.py See the list below.\n&gt; \n&gt; 7) from Cantera import _cante=\r\nra\n&gt; 8) self.tfix =3D tfix\n&gt; 9) self.setFixedTemperature(self.tfix)\n&gt; 10) d=\r\nef setFixedTemperature(self, temp)\n&gt; 11) _cantera.sim1D_setFixedTemperature=\r\n(self._hndl, temp)\n&gt; \n&gt; FreeFlame.py also modifies the following statements=\r\n from \nBurnerFlame.py\n&gt; \n&gt; 12) def _init_(self, gas =3D None, grid =3D None=\r\n, tfix =3D 500.0): \n&gt; in this statement burner =3D None and outlet =3D None=\r\n is removed while\n&gt; tfix is added\n&gt; 13) self.flame =3D AxisymmetricFlow(`fl=\r\name&#39;, gas =3D gas, type=3D2)\n&gt; the difference with this statement was that =\r\ntype=3D2 was added\n&gt; 14) z1 =3D 0.5 is changed from 0.2\n&gt; 15) locs =3D arra=\r\ny([0.0, 0.3, z1, 1.0], `d&#39;) the entry 0.3 is added to\n&gt; the array\n&gt; 16) sel=\r\nf.setProfile(`u&#39;, locs, [u0, u0, u1, u1]) a second u0 is \nadded\n&gt; 17) self.=\r\nsetProfile(`T&#39;, locs, [t0, t0, teq, teq]) a second u0 is \nadded\n&gt; 18) self.=\r\nsetProfile(gas.speciesName(n), locs, [yin[n], yin[n], yeq\n[n],\n&gt; yeq[n]) a =\r\nsecond yin[n] is added.\n&gt; \n&gt; From this point I was looking to build the mod=\r\nel of free_h2_air.py \nin\n&gt; Matlab. I order to do this it looks as if I will=\r\n need to\n&gt; \n&gt; - use the Matlab code in points 1 to 6 and modify it to add i=\r\nn the\n&gt; effects of the points 7 to 18 which was used in the python code.\n&gt; =\r\n\n&gt; A few questions\n&gt; \n&gt; - How do you implement the tfix variable?\n&gt; - What =\r\ndoes type=3D2 mean for AxisymmetricFlow?\n&gt; - Why is Z1 changed to .5?\n&gt; - W=\r\nhy is locs array modified to have 4 entries which in turn\n&gt; introduces a se=\r\ncond u0, t0 and yin[n] (points 15 to 18 above)?\n&gt; \n&gt; Does anyone have any s=\r\nuggestions to help me understand how to do \nthis\n&gt; or can help explain this=\r\n to me?\n&gt; \n&gt; Thank you in advance.\n&gt; \n&gt; Chris Kelly\n&gt; \n&gt; \n&gt; --- In cantera@=\r\nyahoogroups.com, &quot;transfertoschool&quot; &lt;ademator@&gt; \nwrote:\n&gt; &gt;\n&gt; &gt; Hi all,\n&gt; &gt;=\r\n \n&gt; &gt; I was experimenting with the example free_h2_air.py and I have \nbeen\n=\r\n&gt; &gt; able to run the example using python. However, I would prefer to \ndo my=\r\n\n&gt; &gt; work in Matlab if possible. I was wondering if there was a Matlab\n&gt; &gt; =\r\nfunction that can be used in place of the FreeFlame function used \nin\n&gt; &gt; t=\r\nhe python example? I am new to cantera and was looking to run\n&gt; &gt; different=\r\n simulations with this example via matlab if possible.\n&gt; &gt; \n&gt; &gt; Thank you\n&gt;=\r\n &gt; \n&gt; &gt; Chris Kelly\n&gt; &gt;\n&gt;\n\n\n\n"}}