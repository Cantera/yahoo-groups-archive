{"ygPerms":{"resourceCapabilityList":[{"resourceType":"GROUP","capabilities":[{"name":"READ"},{"name":"JOIN"}]},{"resourceType":"PHOTO","capabilities":[]},{"resourceType":"FILE","capabilities":[]},{"resourceType":"MEMBER","capabilities":[]},{"resourceType":"LINK","capabilities":[]},{"resourceType":"CALENDAR","capabilities":[]},{"resourceType":"DATABASE","capabilities":[]},{"resourceType":"POLL","capabilities":[]},{"resourceType":"MESSAGE","capabilities":[{"name":"READ"}]},{"resourceType":"PENDING_MESSAGE","capabilities":[]},{"resourceType":"ATTACHMENTS","capabilities":[{"name":"READ"}]},{"resourceType":"PHOTOMATIC_ALBUMS","capabilities":[]},{"resourceType":"MEMBERSHIP_TYPE","capabilities":[]},{"resourceType":"POST","capabilities":[{"name":"READ"}]},{"resourceType":"PIN","capabilities":[]}],"groupUrl":"groups.yahoo.com","intlCode":"us"},"comscore":"pageview_candidate","ygData":{"userId":286652986,"authorName":"spdomin","from":"&quot;spdomin&quot; &lt;spdomin@...&gt;","replyTo":"LIST","senderId":"hkNqWLdi1czYQIDFgOZ2jwZSjUFO0r3oQJhdrwIdIHbrK-prtjNunKlYQKr1zIfx4CZ22MMF2C5ZDWGHMpjgctomt5yO","spamInfo":{"isSpam":false,"reason":"0"},"subject":"Virtual method warnings","postDate":"1164909938","msgId":1434,"canDelete":false,"contentTrasformed":false,"systemMessage":true,"headers":{"messageIdInHeader":"PEMxOTQ2QjgyLjM3MzAlc3Bkb21pbkBzYW5kaWEuZ292Pg=="},"prevInTopic":0,"nextInTopic":1436,"prevInTime":1433,"nextInTime":1435,"topicId":1434,"numMessagesInTopic":2,"msgSnippet":"Hi, Let s talk about a specific warning that I am noting in 1.7.0 and later about the rules about virtual methods - as in what is and is not ","rawEmail":"Return-Path: &lt;spdomin@...&gt;\r\nReceived: (qmail 7388 invoked from network); 2 Dec 2006 19:02:10 -0000\r\nReceived: from unknown (66.218.66.217)\n  by m37.grp.scd.yahoo.com with QMQP; 2 Dec 2006 19:02:10 -0000\r\nReceived: from unknown (HELO n6c.bullet.sp1.yahoo.com) (69.147.64.164)\n  by mta2.grp.scd.yahoo.com with SMTP; 2 Dec 2006 19:02:10 -0000\r\nReceived: from [216.252.122.218] by n6.bullet.sp1.yahoo.com with NNFMP; 02 Dec 2006 19:01:08 -0000\r\nReceived: from [66.218.69.1] by t3.bullet.sp1.yahoo.com with NNFMP; 02 Dec 2006 19:01:08 -0000\r\nReceived: from [66.218.66.79] by t1.bullet.scd.yahoo.com with NNFMP; 02 Dec 2006 19:01:08 -0000\r\nX-Sender: spdomin@...\r\nX-Apparently-To: cantera@yahoogroups.com\r\nReceived: (qmail 82868 invoked from network); 30 Nov 2006 18:07:07 -0000\r\nReceived: from unknown (66.218.67.36)\n  by m32.grp.scd.yahoo.com with QMQP; 30 Nov 2006 18:07:04 -0000\r\nReceived: from unknown (HELO sentry.sandia.gov) (132.175.109.20)\n  by mta10.grp.scd.yahoo.com with SMTP; 30 Nov 2006 18:07:01 -0000\r\nReceived: from 132.175.109.1 by sentry.sandia.gov with ESMTP (SMTP Relay\n 01 (Email Firewall v6.3.0)); Thu, 30 Nov 2006 11:05:40 -0700\r\nX-Server-Uuid: 0D2F78EE-7D53-4621-AAFC-6A86EB50E29B\r\nReceived: from ES23SNLNT.srn.sandia.gov (ec04snlnt.sandia.gov\n [134.253.164.156] (may be forged)) by mailgate.sandia.gov (\n 8.13.6/8.13.6) with ESMTP id kAUI5dBV021539 for\n &lt;cantera@yahoogroups.com&gt;; Thu, 30 Nov 2006 11:05:39 -0700 (MST)\r\nReceived: from ES22SNLNT.srn.sandia.gov ([134.253.164.158]) by\n ES23SNLNT.srn.sandia.gov with Microsoft SMTPSVC(6.0.3790.1830); Thu, 30\n Nov 2006 11:05:40 -0700\r\nReceived: from 134.253.112.133 ([134.253.112.133]) by\n ES22SNLNT.srn.sandia.gov ([134.253.164.160]) with Microsoft Exchange\n Server HTTP-DAV ; Thu, 30 Nov 2006 18:05:39 +0000\r\nUser-Agent: Microsoft-Entourage/11.2.1.051004\r\nDate: Thu, 30 Nov 2006 11:05:38 -0700\r\nTo: &quot;cantera@yahoogroups.com&quot; &lt;cantera@yahoogroups.com&gt;\r\nMessage-ID: &lt;C1946B82.3730%spdomin@...&gt;\r\nThread-Topic: Virtual method warnings\r\nThread-Index: AccUqiO+YkMM8ICdEdu1+QANkzfsQA==\r\nMIME-Version: 1.0\r\nX-OriginalArrivalTime: 30 Nov 2006 18:05:40.0527 (UTC)\n FILETIME=[253F9BF0:01C714AA]\r\nX-TMWD-Spam-Summary: TS=20061130180542; SEV=2.2.0; DFV=B2006113002;\n IFV=2.0.4,4.0-9; AIF=B2006113002; RPD=5.02.0004; ENG=IBF; RPDID=NA;\n CAT=NONE; CON=NONE\r\nX-MMS-Spam-Filter-ID: B2006113002_5.02.0004_4.0-9\r\nX-WSS-ID: 6971C2FE26S5484723-01-01\r\nContent-Type: text/plain;\n charset=us-ascii\r\nContent-Transfer-Encoding: 7bit\r\nFrom: &quot;spdomin&quot; &lt;spdomin@...&gt;\r\nSubject: Virtual method warnings\r\nX-Yahoo-Group-Post: member; u=286652986\r\nX-Yahoo-Newman-Property: groups-system\r\nX-eGroups-Approved-By: dggoodwin &lt;dgoodwin@...&gt; via web; 02 Dec 2006 19:01:07 -0000\r\n\r\nHi,\n\nLet&#39;s talk about a specific warning that I am noting in 1.7.0 and later\nabout the rules about virtual methods - as in what is and is not\nallowed/standard...\n\nThe exact warning we can look towards has to do with a class SpeciesThermo\nthat defines a pure virtual method,\n\nvirtual void update(doublereal T,\n            doublereal* cp_R,\n            doublereal* h_RT,\n            doublereal* s_R) const=0;\n\nThe class SpeciesThermo1, which derives off of SpeciesThermo, provides an\nimplementation of update,\n\nvirtual void update(doublereal t, vector_fp& cp_R,\n            vector_fp& h_RT, vector_fp& s_R) const {\n            _updateAll(m_thermo.begin(),m_thermo.end(),\n                t, cp_R, h_RT, s_R);\n        }\n\nNote that this derived class does not provide a implementation of the\nSpeciedThermo::update pure virtual method!! So, a few compilers provide a\nwarning that SpeciesThermo1::update hides SpeciesThermo::update. Based on\nwhat I know, a SpeciesThermo1 object must not ever be created in Cantera. If\none is created, then the compiler should fail.\n\nNow, let&#39;s consider the following three simple examples that overviews the\n&quot;dos and do nots&quot; of virtual/pure virtual methods...\n\nThe first example defines a pure virtual method in the base class,\nshape::volume(double,double,double), while the derived class does not\nprovide an implementation for this signature and provides an overloaded\nimplementation, circle::volume(). However, the circle object is never\ncreated. This example **compiles** on g++ and fails for Sun10 (see warnings\nbelow).\n\nThe second example is the same as the first, however, creates the circle\nobject. In this case, neither platform compiles. This indicates that the\npure virtual implementation of a derived class check is not performed until\nthe compiler knows that a derived class object is instantiated - at least on\ng++. Sun seems to always understand that what is being attempted is bad\nnews.\n\nThe third example defines a virtual method in the base class,\nshape::volume(double,double,double), while the derived class does not\nprovide an implementation for this signature and provides an overloaded\nimplementation, circle::volume(). This code does not compile (see errors\nbelow) unless &quot;using shape::volume&quot; is included in the circle header. If the\n&quot;using&quot; is omitted, however, a circle::volume(double,double,double)\nimplementation is provided, well, that&#39;s polymorphysim and all is well. This\nis basically what you noted in your last email: provide a default\nimplementation that throws and provide the correct one below and even a new\none with a new signature or return type.\n\nThese are at least the rules of c++. Note the behavior of example 1 and 2 is\nplatform dependent, however, is not standard...\n\nNow, perhaps we can not talk about what is the intent of the SpeciesThermo1\nclass..\n\nRegards,\n\nStefan\n\n\nsass8000(207 )% more hideMeNoPVinDerivedNoEnst.C\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\n//===========================================\n//  Class Definition: shape\n//===========================================\n// shape\n//===========================================\nclass shape {\n  \npublic:\n\n  // constructor\n  shape();\n  \n  // destructor\n  ~shape();\n\n  virtual double volume(double x, double y, double z) = 0;\n\n};\n\n//----------------------------------------------\n//----- constructor ----------------------------\n//----------------------------------------------\nshape::shape(){\n}\n\n//----------------------------------------------\n//---- destructor ------------------------------\n//----------------------------------------------\nshape::~shape(){\n}\n\n                   \n//===========================================\n//  Class Definition: circle\n//===========================================\n// circle \n//===========================================\nclass circle : public shape {\n  \npublic:\n\n  // constructor\n  circle();\n\n  // destructor\n  ~circle();\n  double radius_; \n \n  // over loaded base class virtual method\n  virtual double volume();\n  \n};\n\n//----------------------------------------------\n//----- constructor ----------------------------\n//----------------------------------------------\ncircle::circle() : shape() {\n}\n\n//----------------------------------------------\n//---- destructor ------------------------------\n//----------------------------------------------\ncircle::~circle(){\n}            \n\n//----------------------------------------------\n//---- volume ----------------------------------\n//----------------------------------------------\ndouble circle::volume()\n{\n  double pi = 3.14159;\n  std::cout &lt;&lt; &quot;Now this I can handle - I just assume volume is area... &quot; &lt;&lt;\nstd::endl;\n  return pi*radius_*radius_;\n}\n\nint main()\n\n{  \n  double volume = 1.0;\n \n  std::cout &lt;&lt; &quot;volume &quot; &lt;&lt; volume &lt;&lt; std::endl;\n  \n  return(EXIT_SUCCESS);\n\n}            \n/*\n  g++ no warnings:\n\n    volume 1.0\n\n  Sun10:\n &quot;hideMeNoPureVirtual.C&quot;, line 54: Warning: circle::volume hides the virtual\nfunction shape::volume(double, double, double).\n &quot;hideMeNoPureVirtual.C&quot;, line 84: Error: Cannot create a variable for\nabstract class circle.\n &quot;hideMeNoPureVirtual.C&quot;, line 84: Error:     shape::volume(double, double,\ndouble) has not been overridden.\n &quot;hideMeNoPureVirtual.C&quot;, line 84: Error: Cannot create a value of the\nabstract class circle.\n &quot;hideMeNoPureVirtual.C&quot;, line 84: Error:     shape::volume(double, double,\ndouble) has not been overridden.\n &quot;hideMeNoPureVirtual.C&quot;, line 88: Error: Too many arguments in call to\n&quot;circle::volume()&quot;.\n \n*/\n\nsass8000(210 )% more hideMeNoPVinDerivedWithEnst.C\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\n//===========================================\n//  Class Definition: shape\n//===========================================\n// shape\n//===========================================\nclass shape {\n  \npublic:\n\n  // constructor\n  shape();\n  \n  // destructor\n  ~shape();\n\n  virtual double volume(double x, double y, double z) = 0;\n\n};\n\n//----------------------------------------------\n//----- constructor ----------------------------\n//----------------------------------------------\nshape::shape(){\n}\n\n//----------------------------------------------\n//---- destructor ------------------------------\n//----------------------------------------------\nshape::~shape(){\n}\n\n                   \n//===========================================\n//  Class Definition: circle\n//===========================================\n// circle \n//===========================================\nclass circle : public shape {\n  \npublic:\n\n  // constructor\n  circle();\n\n  // destructor\n  ~circle();\n  double radius_; \n \n  // over loaded base class virtual method\n  virtual double volume();\n  \n};\n\n//----------------------------------------------\n//----- constructor ----------------------------\n//----------------------------------------------\ncircle::circle() : shape() {\n}\n\n//----------------------------------------------\n//---- destructor ------------------------------\n//----------------------------------------------\ncircle::~circle(){\n}            \n\n//----------------------------------------------\n//---- volume ----------------------------------\n//----------------------------------------------\ndouble circle::volume()\n{\n  double pi = 3.14159;\n  std::cout &lt;&lt; &quot;Now this I can handle - I just assume volume is area... &quot; &lt;&lt;\nstd::endl;\n  return pi*radius_*radius_;\n}\n\nint main()\n\n{  \n  double volume;\n\n  circle c1 = circle();\n  c1.radius_ = 1.0;\n  volume = c1.volume();\n  \n  std::cout &lt;&lt; &quot;volume &quot; &lt;&lt; volume &lt;&lt; std::endl;\n  \n  return(EXIT_SUCCESS);\n\n}\n/*\n  g++:\nhideMeNoPVinDerivedWithEnst.C: In function `int main()&#39;:\nhideMeNoPVinDerivedWithEnst.C:84: error: cannot allocate an object of type\n`circle&#39;\nhideMeNoPVinDerivedWithEnst.C:84: error:   because the following virtual\nfunctions are abstract:\nhideMeNoPVinDerivedWithEnst.C:19: error:  virtual double\nshape::volume(double, double, double)\nhideMeNoPVinDerivedWithEnst.C:84: error: cannot declare variable `c1&#39; to be\nof type `circle&#39;\nhideMeNoPVinDerivedWithEnst.C:84: error:   since type `circle&#39; has abstract\nvirtual functions\n\n  Sun10:\n&quot;hideMeNoPVinDerivedWithEnst.C&quot;, line 55: Warning: circle::volume hides the\nvirtual function shape::volume(double, double, double).\n&quot;hideMeNoPVinDerivedWithEnst.C&quot;, line 84: Error: Cannot create a variable\nfor abstract class circle.\n&quot;hideMeNoPVinDerivedWithEnst.C&quot;, line 84: Error:     shape::volume(double,\ndouble, double) has not been overridden.\n&quot;hideMeNoPVinDerivedWithEnst.C&quot;, line 84: Error: Cannot create a value of\nthe abstract class circle.\n&quot;hideMeNoPVinDerivedWithEnst.C&quot;, line 84: Error:     shape::volume(double,\ndouble, double) has not been overridden.\n \n*/\n\n\nsass8000(213 )% more  hideMeVirtualUsing.C\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n\n//===========================================\n//  Class Definition: shape\n//===========================================\n// shape\n//===========================================\nclass shape {\n  \npublic:\n\n  // constructor\n  shape();\n  \n  // destructor\n  ~shape();\n\n  virtual double volume(double x, double y, double z);\n\n};\n\n//----------------------------------------------\n//----- constructor ----------------------------\n//----------------------------------------------\nshape::shape(){\n}\n\n//----------------------------------------------\n//---- destructor ------------------------------\n//----------------------------------------------\nshape::~shape(){\n}\n\n//----------------------------------------------\n//---- volume ----------------------------------\n//----------------------------------------------\ndouble shape::volume(double x, double y, double z) {\n\n std::cout &lt;&lt; &quot; base class call &quot; &lt;&lt; std::endl;\n return x*y*z;\n\n}\n\n             \n//===========================================\n//  Class Definition: circle\n//===========================================\n// circle \n//===========================================\nclass circle : public shape {\n  \npublic:\n\n  // constructor\n  circle();\n\n  // destructor\n  ~circle();\n  double radius_; \n\n  using shape::volume;\n\n  // overloaded bass class virtual method\n  virtual double volume();\n  \n};           \n\n//----------------------------------------------\n//----- constructor ----------------------------\n//----------------------------------------------\ncircle::circle() : shape() {\n}\n\n//----------------------------------------------\n//---- destructor ------------------------------\n//----------------------------------------------\ncircle::~circle(){\n}\n\n//----------------------------------------------\n//---- volume ----------------------------------\n//----------------------------------------------\ndouble circle::volume()\n{\n \n  double pi = 3.14159;\n::endl;      &lt; &quot;Now this I can handle - I just assume volume is area... &quot; &lt;&lt;\nstd--More--(64%)\n  return pi*radius_*radius_;\n}\n\nint main()\n\n{  \n  double volumeBaseClass, volumeDerivedClass;\n\n  circle c1 = circle();\n  c1.radius_ = 1.0;\n \n  volumeBaseClass = c1.volume(1.,2.,3.);\n  volumeDerivedClass = c1.volume();\n \n  std::cout &lt;&lt; &quot;volume from base    class &quot; &lt;&lt; volumeBaseClass &lt;&lt; std::endl;\n  std::cout &lt;&lt; &quot;volume from derived class &quot; &lt;&lt; volumeDerivedClass &lt;&lt;\nstd::endl;\n\n  return(EXIT_SUCCESS);\n\n}\n/*\n without using::shape::volume;\n  \n Sun10: \n&quot;hideMeVirtualUsing.C&quot;, line 67: Warning: circle::volume hides the virtual\nfunction shape::volume(double, double, double).\n&quot;hideMeVirtualUsing.C&quot;, line 100: Error: Too many arguments in call to\n&quot;circle::volume()&quot;.\n\n g++:\nhideMeVirtualUsing.C: In function `int main()&#39;:\nhideMeVirtualUsing.C:100: error: no matching function for call to\n`circle::volume(double, double, double)&#39;\nhideMeVirtualUsing.C:85: note: candidates are: virtual double\ncircle::volume()\n\nWhen using using::shape::volume; both work...\n\nbase class call \nNow this I can handle - I just assume volume is area...\nvolume from base    class 6\nvolume from derived class 3.14159\n \n*/\n\n\n\n"}}